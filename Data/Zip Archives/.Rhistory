binom.test(x = 400, n = 1000, p = 0.35, conf.level = 0.99)
binom.test(x = 400, n = 1000, p = 0.35, conf.level = 0.995)
binom.test(x = 4000, n = 10000, p = 0.35, conf.level = 0.995)
binom.test(x = 4000, n = 10000, p = 0.39, conf.level = 0.995)
binom.test(x = 4000, n = 10000, p = 0.39, conf.level = 0.999)
expression(1+2)
expression(beta)
curve( 1- pbinom( 14, size=20, prob=x), from=0.5, to=1, xlim=c(0,1),
col=2, xlab=expression(theta), ylab=expression(beta[D](theta)))
points(0.5, 1- pbinom( 14, size=20, prob=0.5), cex=1.1, col=2, pch=19)
abline(h=1, lty=2)
lines(c(0.7,0.7), c(1-pbinom( 14, size=20, prob=0.7),1), col=3)
text(0.55,0.7,labels=expression(1-beta[D](0.7)),col=3)
expression(1-beta[D](0.7))
cat(expression(1-beta[D](0.7)))
plot(sin, 0, 2*pi)
plot(sin, 0, 2*pi, xlab = expression(alpha), ylab = expression(sin(alpha)))
plot(sin, 0, 2*pi, xlab = paste(expression(alpha), "ha"), ylab = expression(sin(alpha)))
frac(x,y)
demo(plotmath)
(1 - 270 / 300) / (1 - 270 / 600)
(17 + 273.15) * 2e3 / (20)^2
k <- c(1, 2, 3, 4)
k
f <- glm(k ~ 1, family = poisson(link = "log"))
f
exp(0.9163)
sum(k) / 4
teams <- c("Bayern", "Bremen", "Frankfurt", "Schalke", "Augsburg", "Wolfsburg", "Hamburg", "Ingolstadt", "Köln", "Darmstadt", "Dortmund", "Mainz", "Gladbach", "Leverkusen", "Hertha", "Freiburg", "Hoffenheim", "Leipzig")
teams
sort(teams)
plot(function(x) )
lambda <- 1
plot(function(x) lambda ^ x / gamma(x + 1))
gamma(3)
gamma(4)
plot(function(x) lambda ^ x / gamma(x + 1), 0, 9)
0x98
0x2196f3
0x21
0x96
0xf3
03a9f4
ox03
0x03
0xa9
0xf4
resolutions <- c(160, 240, 320, 480, 640)
40 * resolutions / 160
4/6
5/6
0xd41612
0x41
ßx16
0x16
0x12
0xd4
1000 * resolutions / 160
1500 * resolutions / 160
1000 * resolutions / 160
212*0x10000+22*0x100+18
as.hex(and)
as.hex(ans)
as.hexmode(13899282)
library(colorspace)
install.packages("colorspace")
install.packages("colorspace")
library(colorspace)
hex2RGB(c4130a)
hex2RGB(0xc4130a)
hex2RGB(0xc4130a)
hex2RGB(as.hexmode(0xc4130a))
hex2RGB("#c4130a")
hex2RGB("#c4130a")*255
hex2RGB("#c4130a")*255
hex2RGB("#c4130a") * 255
a <-hex2RGB("#c4130a")
a
as.numeric(a)
str(a)
a@coords
a@coords*255
a <- hex2RGB("#ba0e05")
a@coords * 255
a <- hex2RGB("#05ba29")
a@coords * 255
(sqrt(3)/2+1)/2
(sqrt(3)/2+1)
cat("1.0Hz")
for (i in seq(0,10,.1)) {cat(paste0(toString(round(i, digits = 1))), "Hz")}
for (i in seq(0,10,.1)) {cat(paste0(toString(round(i, digits = 1))), "Hz\n")}
cat("%d",2.0)
for (i in seq(0,10,.1)) {cat("<item>", round(i, digits = 1), "Hz\n", "<\item>")}
for (i in seq(0,10,.1)) {cat("<item>", round(i, digits = 1), "Hz<\item>\n")}
for (i in seq(0,10,.1)) {cat("<item>", round(i, digits = 1), "Hz<\\item>\n")}
for (i in seq(0,.5,.01)) {cat("<item>", round(i, digits = 1), "</item>\n")}
for (i in seq(0,.5,.01)) {cat("<item>", round(i, digits = 2), "</item>\n")}
atan(2)
atan(1/2)
pi/4
pi/2
randu
8*1.4/100
0.15*170
10*1.4/100
0.14*170
0.13*170
2*21.75+14.38+113.01+47.48-150
-850+550-10+7+0.5+194+53+2+26+19.5+37.5+12.95+37.88+73.21+104
-850+550-10+7+0.5+194+53+2+26+19.5+37.5+12.95+37.88+73.21+104-250
(39+46/60)/8.6
(72+7/60)/16.1
(72+7/60)/16.2
(72+7/60)/16.0
(39+46/60)/8.7
76.5+99.75+7+3.94+7+4.1+3.6
0.13*165.1
71/679
7.874/55.845*6.022141e23
7.874/55.845*6.022141e23*(2.8665e-10)^3
7.874/55.845*6.022141e23*(2.8665e-8)^3
4.05+.9+4.34+1.97/2-3.37
69.9+55.9+4+124.35-200
14.25*2
2^(1/6)*3.65
4*511+4*938272-4.002602*931393
2*938272-1875612.9-511
420/27.14
420/27140
1367*2/27.14e6/1.602e-19
113.01+14.38+47.48
-174.87+150
-174.87+150-43.5
-69.9-4-124.35
+150
-69.9-4-124.35+150
-69.9-4-124.35+150-55.9
-69.9-4-124.35+200-55.9
-69.9-4-55.9
-99.75
-76.5
-21.54
-4.1
-99.75-76.5-21.54-4.1
4*7+2*9.7
3*9.7-0.05
3*9.7
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateCoefficients.R')
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateCoefficients.R')
sum(dates < as.Date("1/1/16", format = "%d/%m/%y")
sum(dates < as.Date("1/1/16", format = "%d/%m/%y"))
sum(dates < as.Date("1/1/16", format = "%d/%m/%y"))
dates(1)-dates(100)
dates[1]-dates[100]
as.numeric(dates[1]-dates[100])
6*11
6*365
-log(0.1/(6*365))
exp(-10*6*365)
-log(0.1)/(6*365)
-log(0.5)/(6*365)
date
max(dates)
seq(-4, -3, length.out = 100)
rep(NULL, length(lambda))
rep(NULL, length(c(1,1,1)))
years[end]
a <- c(2,2,2,3)
min(a)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
modelCoef
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
modelCoef
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
modelCoef
unsion(teamAData)
union(teamAData)
union(teamAData, teamBData)
length(levels(as.factor(teamAData)))
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
modelCoef
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
lab
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
a
labels(a) <- as.character(1:4)
label(a) <- as.character(1:4)
labels(a)
a
names(a)
names(a) <- as.character(1:4)
a
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
modelCoef
seq(3)
seq("Hans")
which(a == 2)
which.any(a == 2)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
modelCoef
which.min(a)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
accuracy
outcomeTest
predictedOutcome
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
plot(log(lambda), accuracy)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
plot(log(lambda), accuracy)
median(c(1,2,3))
median(1:4)
any(1:10<4)
which.min(a)
a
save(a, file = "test.txt")
save("abc", file = "test.txt")
write.csv(a, file = "test.csv")
library("dlm")
install.packages("dlm")
library(dlm)
write.del
write.table(a, file = "test.txt")
write.table(1, file = "test.txt")
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
dirname(sys.frame(1)$ofile)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
setwd("../Simple Poisson model/Parameter/")
load("lambda.RData")
lambdaOpt
exp(-lambdaOpt*6*365)
which.max(accuracy)
which(accuracy == max(accuracy))
exp(-lambda[161]*6*365)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
lambdaOpt
exp(-lambdaOpt*6*365)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
exp(-lambdaOpt*6*365)
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
source('~/Documents/Bundesliga Prediction/Model/Simple Poisson model/CalculateLambda.R')
lambdaOpt
exp(-lambdaOpt*6*365)
source('~/Documents/Soccer Prediction/Model/Data/Preprocessing.R')
